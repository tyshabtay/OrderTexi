// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderTexi.Data;

#nullable disable

namespace OrderTexi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250104203134_UpdateItemSchema2")]
    partial class UpdateItemSchema2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderTexi.Modals.Driver", b =>
                {
                    b.Property<int>("driver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("driver"));

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("driver");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("OrderTexi.Modals.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("OrderPhone")
                        .HasColumnType("int");

                    b.Property<int>("XDestination")
                        .HasColumnType("int");

                    b.Property<int>("XcurrentPlace")
                        .HasColumnType("int");

                    b.Property<int>("YDestination")
                        .HasColumnType("int");

                    b.Property<int>("YcurrentPlace")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("OrderTexi.Modals.Texi", b =>
                {
                    b.Property<int>("TexiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TexiId"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("Tstatus")
                        .HasColumnType("int");

                    b.Property<int>("XgoogleMaps")
                        .HasColumnType("int");

                    b.Property<int>("YgoogleMaps")
                        .HasColumnType("int");

                    b.HasKey("TexiId");

                    b.HasIndex("DriverId");

                    b.ToTable("Texis");
                });

            modelBuilder.Entity("OrderTexi.Modals.User", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.HasKey("Uid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("OrderTexi.Modals.Texi", b =>
                {
                    b.HasOne("OrderTexi.Modals.Driver", "Tdriver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tdriver");
                });
#pragma warning restore 612, 618
        }
    }
}
